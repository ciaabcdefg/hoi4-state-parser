use crate::{
    parser::{AssignmentExpression, AssignmentValue, TableEntry},
    token::TokenType,
};

pub fn assignment_expr_to_json(assignment_expr: &AssignmentExpression, indent: usize) -> String {
    let indent_str = "    ".repeat(indent);
    let next_indent_str = "    ".repeat(indent + 1);

    match &assignment_expr.value {
        AssignmentValue::Table(table) => {
            let mut is_array: Option<bool> = None;
            let mut table_strings: Vec<String> = Vec::new();

            for entry in table {
                match entry {
                    TableEntry::ArrayElement(element) => {
                        if let Some(false) = is_array {
                            panic!("JSONTransformerError: arrays cannot have keyed elements");
                        }
                        is_array.get_or_insert(true);
                        table_strings.push(format!("{}{}", next_indent_str, element.value));
                    }
                    TableEntry::KeyValue(key_value) => {
                        if let Some(true) = is_array {
                            panic!("JSONTransformerError: objects cannot have keyless elements");
                        }
                        is_array.get_or_insert(false);
                        table_strings.push(assignment_expr_to_json(key_value, indent + 1));
                    }
                }
            }

            let mut brackets: (char, char);

            if let Some(true) = is_array {
                brackets = ('[', ']');
            } else {
                brackets = ('{', '}');
            }

            return format!(
                "{}\"{}\": {}\n{}\n{}{}",
                indent_str,
                assignment_expr.identifier.value,
                brackets.0,
                table_strings.join(",\n"),
                indent_str,
                brackets.1
            );
        }
        AssignmentValue::Value(value) => {
            if value.token_type == TokenType::String || value.token_type == TokenType::Identifier {
                return format!(
                    "{}\"{}\": \"{}\"",
                    indent_str, assignment_expr.identifier.value, value.value
                )
                .to_string();
            } else {
                return format!(
                    "{}\"{}\": {}",
                    indent_str, assignment_expr.identifier.value, value.value
                )
                .to_string();
            }
        }
    }
}
